services:
  articles_dc_fastapi_startrek:
    container_name: articles_dc_fastapi_startrek
    hostname: articles_dc_fastapi_startrek.local
    env_file:
      - .env
    build:
      context: .
    working_dir: /src
    volumes:
      - ..:/src:cached
    command: >
      bash -c "sleep infinity"
    ports:
      - "${app_port}:8000"
      - "${nicegui_port}:8080"
    depends_on:
      - startrek_db
    networks:
      articles_dc_fastapi_startrek-net:

  startrek_db:
  #image: postgres:17.4-alpine3.21
    image: postgres:14.1-alpine
    container_name: startrek_db
    restart: always
    environment:
      - POSTGRES_USER=${db_user}
      - POSTGRES_PASSWORD=${db_password}
      - POSTGRES_DB=${db_name}
    ports:
      - "${db_ext_port}:5432"
    networks:
      articles_dc_fastapi_startrek-net:
    volumes:
     - db_data:/var/lib/postgresql/data

  adminer:
    image: adminer:5.0.4
    container_name: adminer
    restart: always
    ports:
      - ${adminer_port}:8080
    depends_on:
      - startrek_db
    networks:
      articles_dc_fastapi_startrek-net:

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    hostname: prometheus.local
    ports:
      - ${prometheus_port}:9090
    volumes:
      - ./prometheus_config/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-lifecycle'
    networks:
      articles_dc_fastapi_startrek-net:

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - ${grafana_port}:3000
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
       - prometheus
    networks:
      articles_dc_fastapi_startrek-net:

  alertmanager:
    image: prom/alertmanager:latest
    restart: unless-stopped
    container_name: alertmgr
    hostname: alertmanager.local
    ports:
      - ${alertmanager_port}:9093
    volumes:
      - "./alertmanager:/config"
      - alertmanager-data:/data
    command: --config.file=/config/alertmanager.yml --log.level=debug
    networks:
      articles_dc_fastapi_startrek-net:
      
  # https://github.com/dockage/mailcatcher
  mailcatcher:
    restart: on-failure
    image: dockage/mailcatcher:0.9.0
    hostname: mailcatcher.local
    ports:
    - "1080:1080"
    - "1025:1025"
    networks:
      articles_dc_fastapi_startrek-net:

  kener:
    image: rajnandan1/kener:latest      # Change to 'rajnandan1/kener:alpine' for an even smaller image! üòÅüöÄ
    container_name: kener
    # env_file: custom.env              # Uncomment this if you are needing to export environment variables from a custom environment file. By default, Docker will import any variables that exist in `.env`
    environment:
      TZ: Etc/UTC
      KENER_SECRET_KEY: replace_me_with_a_random_string   # Keep private!! - best to define in `.env` file or through Docker Secret
      # DATABASE_URL: custom_db_url     # By default, a SQLite database is used - you may override the database url/type here
      # RESEND_API_KEY: 
      # RESEND_SENDER_EMAIL: 

      ### You most likely will NOT need to change anything below this line. Be sure you know what you're doing!! (https://kener.ing/docs/deployment/#docker-environment-variables)

      # PORT: 3000                      # Port that app listens on in the container
      # KENER_BASE_PATH:                # By default, Kener runs at `/`. You may change this to be, e.g. `/status`, etc. Do NOT add a trailing slash!! (more info here: https://kener.ing/docs/deployment/#docker-environment-variables)
      # ORIGIN: http://localhost:3000
      # NODE_ENV: production            # This is already set to "production" by default within the container
    ports:
      - '${kener_port}:3000/tcp'
    volumes:
      - data:/app/database              # We suggest using a Docker named volume, which is more performant for databases
      #- $(pwd)/uploads:/app/uploads
      - $PWD/uploads:/app/uploads
      #- $../kerner_uploads:/app/uploads:cached
    # read_only: true                   # Uncommenting this fortifies security by marking the container's filesystem as read-only (aka no data can be written to the container's filesystem except for explicitly defined writable volumes and bind mounts, an exception has already been defined for `/database` and `/uploads`)
    restart: unless-stopped
    # depends_on:                       #  <-- Uncomment if you would like to use PostgreSQL or MySQL
    #   - postgres                      #       ...instead of SQLite
    #   - mysql                         #
    networks:
      articles_dc_fastapi_startrek-net:

networks:
  articles_dc_fastapi_startrek-net:

volumes:
  db_data: 
    driver: local
  grafana_data:
    driver: local
  alertmanager-data:
    driver: local
  data:
    name: kener_db
